html(lang="en")
  include _partials/common.pug
  include mixins/project_mixins.pug
  script(src="assets/js/Projects.js")
  main
    h1 Projects
    .row.project-directory 
      .col-4#project-index-row0 
      .col-4#project-index-row1
      .col-4#project-index-row2
    ul#project-index
    #project-articles.project-articles

      +project("Empire", "August 2017",  "cpp sfml cellular-automaton", "empire", "https://www.youtube.com/watch?v=3mgGQR6oGxI&t=145s&ab_channel=Hopson", "https://github.com/Hopson97/Empire", "youtube")
        p Empire was custom cellular automaton (Which technically isn't a cellular automaton but more of a simulation) which aimed to simulate different colonies taking over a "map". 
        p It was based on a classic RPG system, where a colonist would move to random square adjacent to them, and if there was someone from a different colinist then they would fight. The colonist with the higher strength value would survive, and the other one would die. 
        p Each move, the age of the person would decrease but there would be a small chance to produce a child, who would inherit the traits of the parent, such as their strangth value; however they would sometimes mutate, which would increase their strength value.

      +project_multiimage("Minecraft One Week Challenge", "August 2017",  "cpp sfml opengl game challenge", "mcweek1", "mcweek2", "https://github.com/Hopson97/MineCraft-One-Week-Challenge", "https://www.youtube.com/watch?v=Xq3isov6mZ8&ab_channel=Hopson")
        p Inspired by the Minecraft One Week Challenge In Unity 3D by Shane Beck, this project aimed to also attempt that, but instead from scratch using C++ and OpenGL.
        p This was created mostly for a video, where I describe what I am working on each day. For example, day 1 was setting up OpenGL boilerplate code, and day 2 was getting chunks to render etc.

      +project("Hero", "February 2017",  "cpp sfml game", "hero", "https://github.com/Hopson97/Hero", "https://www.youtube.com/watch?v=P8uNqotAbas&ab_channel=Hopson")
        p A game based on "Hero" by FaceOS on Scratch. It features running between different zones using a map you can access by walking to a corner sign post on each area. 
        p Each area features a set of monsters to fight, and eventually as you level up you unlock the ability to reach new areas.
        a(hef="https://scratch.mit.edu/projects/2399118/", taget="_blank") (Link to OG Game)

      +project_noimage("Brainf*ck Interpretter", "February 2017",  "cpp", "https://github.com/Hopson97/Brainf-ck-Interpretter")
        p Says it on the tin really, just an interpretter for the Brainf*ck langauge.
        p From Wikipedia: "Brainf*ck is an esoteric programming language created in 1993 by Urban MÃ¼ller. Notable for its extreme minimalism, the language consists of only eight simple commands and an instruction pointer. While it is fully Turing complete, it is not intended for practical use, but to challenge and amuse programmers. Brainf*ck simply requires one to break commands into microscopic steps."
        

      +project("HopsonCraft", "October 2016",  "cpp opengl sfml minecraft game", "hopsoncraft", "https://github.com/Hopson97/HopsonCraft", "https://www.youtube.com/watch?v=GACpZp8oquU&ab_channel=Hopson")
        p My first ever large(ish) OpenGL project, which was a Minecraft clone. When I started to learn programming, creating a clone of Minecraft was a mini-goal of mine, and a a year bit from starting to learn C++ I eventually did create what is basically "minecraft classic" without a GUI.
        p This was mostly created an excersise for learning OpenGL, as before this everything was done very simple. The project itself went through multiple iterations as I was learning new things and wanted to structure the project differently. These iterations can be found on my YouTube channel.
        p It featured world generaiton using perlin noise, and world breaking and modelling. Certain features were added or removed at certain points in time. For example, some iterations had the "Minecraft-like" lighting models, others had infinite height, and others had world saving/ loading. 

      +project_multiimage("3D Cubes", "March 2016",  "cpp opengl", "3dcubes", "3dcubes2", "https://github.com/Hopson97/3D-Alien-Cubes", "https://www.youtube.com/watch?v=mrrUkoSiPJE&ab_channel=Hopson")
        p An early OpenGL project created when trying to work out how to build a Minecraft clone. The cubes themselves are rendered individually as at the time I was unaware of creating large meshes or instance rendering techniques.

      +project("City Game", "September 2016",  "cpp sfml game", "citygame1", "https://github.com/Hopson97/City-Game")
        p A city building game based on Dot Village, which is a game on Scratch. It featured "days" that would pass, which would look at the current buildings in the city and then update some values, such as coins, population, and resources (eg food, wood, and stone)
        p The original game can be found 
          a(href="https://scratch.mit.edu/projects/2151947/" taget="_blank")

      +project("Hop Virtual Machine", "September 2016",  "cpp emulator", "hopvm", "https://github.com/Hopson97/HOP-Virtual-Machine", "youtube")
        p At the time a friend was teaching about how computers actually work, by executing very simple instuctions that contained an opcode and operands.
        p This programs was to emulate the a very simple machine using a custom instruction set/byte code. It featured 10 commands, (push, pop, add, sub, print, jump, jie, jin, jil, jig, exit), and an "assembler" to convert high level instrucions into the byte code that the VM would understand.
        p This works by using the fetch, decode, excute model, where the "CPU" will fetch the next instruction based on the instruction pointer location, decode the opcode and operands, and then finally execute the instruction.

      //  ASCIIMON Clasic
      //
      +project_multiimage("AsciiMon Classic", "July 2016",  "cpp ascii game", "asciimonclassic1", "asciimonclassic2", "https://github.com/Hopson97/ASCIImon", "https://www.youtube.com/watch?v=_catGKf-yCk&ab_channel=Hopson")
        p Pokemon game created using ASCII art. It was implemented as a custom engine, meaning that any maps or asciimon added into the game will "just work" without having to edit any of the C++ code.
        p It features basic talking scenes, a world to explore, tall grass where you can encounter "asciimon", a battle system. and a leveling up system for the different Asciimon.

      //  KINGDOM
      //
      +project_multiimage("Kingdom", "April 2016", "cpp sfml game", "kingdom1", "kingdom2", "https://github.com/Hopson97/Kingdom", "https://www.youtube.com/watch?v=MITfqzzeLC8&ab_channel=Hopson")
        p Kingdom was "game" that was originally supposed to be a "minicraft x stardew valley" combo, but instead ending up being more like an experimental project where I played around with a custom componenet system, that would allow attatching different logic types to entities, eg following the player, or turnng water into ice when stepped on.
        p Every entity had an std::vector of components, taht are looped through every frame in the update method, after doing any unique logic of a derived entity class first. These components are added in the constructor of any class that is derived by the entity class.
        p If you are interested, there is a tonne more info in the YouTube/ Github links below the images.

      //  ATTACK
      //
      +project("Attack", "April 2016", "cpp sfml game", "attack", "https://github.com/Hopson97/Ancient-Projects/tree/master/c%2B%2B/heli-attack", "https://www.youtube.com/watch?v=fZSS32AHWpU&ab_channel=Hopson")
        p A simple shooting game. This was my first time doing a title-map collision detection system, and also implementing a particle system. 
          a(href="https://www.miniclip.com/games/heli-attack-3/en/", target="_blank") (Link to original) 
        p It features a little animated army-dressed character who is able to walk around a map. The maps themselves are loaded from a text file with different characters representing tile types, where g = grass, d = dirt, and a space is just air.

      //  FASTER THAN WIND
      //
      +project_multiimage("Faster Than Wind", "January 2016", "cpp sfml game", "ftw1", "ftw2", "https://github.com/Hopson97/Faster-Than-Wind")
        p An attempted clone of the game "FTL: Fater than Light". At the time I was very into the game FTL, so I felt like creating my own version would be an interesting challenge.  
          a(href="https://store.steampowered.com/app/212680/FTL_Faster_Than_Light/", target="_blank") (Link to original) 
        p It features a ship editor, as well as the game itself. The game itself was never finished beyond a main menu screen and a ship selection screen.
        p Eventually I would like to revisit this project and probably rewrite it.
      
      //
      //  PYORO
      //
      +project("Pyoro Clone", "December 2015", "cpp sfml game", "pyoro", "https://github.com/Hopson97/Pyoro", "https://www.youtube.com/watch?v=kzaj-PKvoLU&ab_channel=Hopson")
        p A simple clone of the WarioWare game, Pyoro 
          a(href="https://www.mariowiki.com/Pyoro", target="_blank") (Link to original)
        p This was created when racing a friend, who was also creating the same project. At the time, we were both new to using SFML in C++, and so we were giving eachother tips on how to implement certain functionality as we went. 
        p For example, he implemented the fading background, while I developed the extendable tongue.
        p In total, it took ~14 hours to complete.

      //  HOPSON LAND
      //
      +project("Hopson Land", "August 2015","cpp ascii game", "hopsonland", "https://github.com/Hopson97/Hopson-Land")
        p This was one of my earliest games, created when I was first learning C++. It was also my first time creating classes correctly, as before this I did not really know what they were for.
        p It was just a simple RPG game where you had the ability to roam around a little world, and then encounter enemies in certain parts where it would transision to an RPG turn-based-style battle system.
        
      
      // +project_multiimage("Name", "Date",  "Tags", "Image", "image", "github", "youtube")
      // +project("Name", "Date",  "Tags", "Image", "github", "youtube")
  include _partials/footer.pug
